===========================
0-add_integer module
===========================

Defines an integer addition function ``add_integer(a, b=98)``.

Usage
=====

``add_integer(...)``` returns the addition of its two arguments.


Verify import
>>> add_integer = __import__('0-add_integer').add_integer

SUCCESS CASES:

Positive and negative integers and floats:
     >>> print(add_integer(1, 2))
     3
     >>> print(add_integer(-1, 2))
     1
     >>> print(add_integer(1.5, 2.9))
     3
     >>> print(add_integer(-2.9, 1))
     -1

Test usage of default b=98 value:
     >>> print(add_integer(1))
     99


FAILURE CASES:

No arguments:
     >>> print(add_integer(None))
     Traceback (most recent call last):
     ...
     TypeError: a must be an integer
     >>> print(add_integer(None, None))
     Traceback (most recent call last):
     ...
     TypeError: a must be an integer

Too many arguments:
     >>> print(add_integer(1, 2, 3))
     Traceback (most recent call last):
     ...
     TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

Incorrect data type:
     >>> print(add_integer("hello"))
     Traceback (most recent call last):
     ...
     TypeError: a must be an integer

     >>> print(add_integer(0, [1, 2, 3]))
     Traceback (most recent call last):
     ...
     TypeError: b must be an integer

Test max/min numbers Python can handle ("inf" is infinity):
     >>> print(add_integer(float("inf")))
     Traceback (most recent call last):
     ...
     OverflowError: cannot convert float infinity to integer
     >>> print(add_integer(float("-inf")))
     Traceback (most recent call last):
     ...
     OverflowError: cannot convert float infinity to integer

Test special float NaN in Python (not a number):
     >>> print(add_integer(float("NaN")))
     Traceback (most recent call last):
     ...
     ValueError: cannot convert float NaN to integer
